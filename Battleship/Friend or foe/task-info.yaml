type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/ShipArmada.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;

    public class ShipArmada {

        Ship Carrier;
        Ship BattleShip;
        Ship Submarine;
        Ship Cruiser;
        Ship Destroyer;
        Boolean newlySunk;

        ArrayList<Ship> shipArmadaList;

        public ShipArmada(Ship Carrier, Ship Battleship, Ship Submarine, Ship Cruiser, Ship Destroyer) {
            this.Carrier = Carrier;
            this.BattleShip = Battleship;
            this.Submarine = Submarine;
            this.Cruiser = Cruiser;
            this.Destroyer = Destroyer;
            this.newlySunk = false;

            shipArmadaList = new ArrayList<>();

            shipArmadaList.add(Carrier);
            shipArmadaList.add(Battleship);
            shipArmadaList.add(Submarine);
            shipArmadaList.add(Cruiser);
            shipArmadaList.add(Destroyer);

        }

        public ArrayList<Ship> getShipArmadaList() {
            return shipArmadaList;
        }

        public void getValidTargets() {
            for (Ship ship : shipArmadaList) {
                int[] tempArray = ship.getShipCoordinates();
                for (int i = 0; i < tempArray.length; i++) {
                    System.out.println(ship.getShipName() + " " + tempArray[i]);
                }
            }
        }

        public void fillValidTargetArrays() {
            for (Ship ship : shipArmadaList) {
                ship.setValidTargetArray();
            }
        }

        public void getValidTargetArrays() {
            for (Ship ship : shipArmadaList) {
                int[] tempArray = ship.getShipTargetArray();
                for (int i = 0; i < tempArray.length; i++) {
                    System.out.println(ship.getShipName() + " " + tempArray[i]);
                }
            }
        }

        public boolean checkForHit(int target) {

            for (Ship ship : shipArmadaList) {
                int[] tempArray = ship.getShipTargetArray();
                for (int i = 0; i < tempArray.length; i++) {
                    //System.out.println("SHIP - " + ship.getShipName() + " target - " + target + " tempArrayI - " + tempArray[i]  );
                    if (target == tempArray[i]) {
                        return true;
                    }
                }

            }
            return false;
        }

        public boolean allShipsSunk() {
            for (Ship ship : shipArmadaList) {
                if (!ship.checkShipSunk()) {
                    return false;
                }
            }
            return true;
        }

        public void setHit(int target) {
            for (Ship ship : shipArmadaList) {
                int[] tempArray = ship.getShipTargetArray();
                for (int i = 0; i < tempArray.length; i++) {
                    if (target == tempArray[i]) {
                        ship.setHit(i);
                    }
                }
            }
        }

        public void viewShipArrays() {
            for (Ship ship : shipArmadaList) {
                String[] tempArray = ship.getShipArray();
                for (int i = 0; i < tempArray.length; i++) {
                    System.out.print(tempArray[i]);
                }
                System.out.println();
            }
        }




    }
  learner_created: true
- name: src/battleship/Board.java
  visible: true
  text: |
    package battleship;

    import java.util.ArrayList;

    public class Board {
        String[][] board;

        public Board() {
            this.board = new String[11][11];
        }

        public void createBoard() {
            char rowLetter = 'A';
            for (int rows = 0; rows < board.length; rows++) {

                for (int cols = 0; cols < board[rows].length; cols++) {
                    if ((rows == 0 && cols == 0)) {
                        board[0][0] = " ";
                        continue;
                    }
                    if (rows == 0) {

                        Integer colInteger = cols;
                        board[rows][cols] = colInteger.toString();
                        continue;
                    }

                    if (cols == 0) {

                        int rowLetterAcsii = (int) rowLetter + rows - 1;
                        rowLetter = (char) rowLetterAcsii;
                        board[rows][cols] = String.valueOf(rowLetter);
                        rowLetter = 'A';
                        continue;
                    }

                    board[rows][cols] = "~";

                }
            }
        }

        public void printBoard() {
            for (int rows = 0; rows < board.length; rows++) {
                for (int cols = 0; cols < board[rows].length; cols++) {
                    System.out.print(board[rows][cols] + " ");

                }
                System.out.println();
            }
        }



        public void printFogOfWar() {
            for (int rows = 0; rows < board.length; rows++) {
                for (int cols = 0; cols < board[rows].length; cols++) {
                    if(board[rows][cols].equals("O")) {
                        System.out.print("~ ");

                    }
                    else {
                        System.out.print(board[rows][cols] + " ");
                    }
                }
                System.out.println();
            }
        }

        public void placeShipArmada(ShipArmada shipArmada) {
            ArrayList<Ship> shipArmadaList = shipArmada.getShipArmadaList();

            for(Ship ship : shipArmadaList) {
                placeShip(ship);
            }

        }

        public void placeShip(Ship shipObject) {
            String[] shipArray = shipObject.getShipArray();
            int[] shipCoordinates = shipObject.getShipCoordinates();

                if (shipCoordinates[0] == shipCoordinates[2]) {
                    int i = 0; //used to loop through ship array
                    for (int col = shipCoordinates[1]; col <= shipCoordinates[3]; col++) {
                        board[shipCoordinates[0]][col] = shipArray[i];
                        i++;
                    }
                }
                if (shipCoordinates[1] == shipCoordinates[3]) {
                    int i = 0; //used to loop trhough ship array
                    for (int row = shipCoordinates[0]; row <= shipCoordinates[2]; row++) {
                        board[row][shipCoordinates[1]] = shipArray[i];
                        i++;
                    }
                }
            }


            //for (int rows = 0; rows < board.length;)


        public boolean checkEmpty(int[] shipCoordinates) {
            if(shipCoordinates[0] == shipCoordinates[2]) {
                int i = 0; //used to loop through ship array
                for (int col = shipCoordinates[1];col<=shipCoordinates[3];col++) {
                    if(board[shipCoordinates[0]][col] == "O") {
                        System.out.println();
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        System.out.println();
                        return false;
                    }
                    if(!checkSurroundingArea(shipCoordinates[0],col)) {
                        return false;
                    }
                    i++;
                }
            }
            if(shipCoordinates[1] == shipCoordinates[3]) {
                int i = 0; //used to loop trhough ship array
                for(int row = shipCoordinates[0];row<=shipCoordinates[2];row++){
                    if(board[row][shipCoordinates[1]] == "O") {
                        System.out.println();
                        System.out.println("Error! You placed it too close to another one. Try again:");
                        System.out.println();
                        return false;
                    }
                    if(!checkSurroundingArea(row,shipCoordinates[1])) {
                        return false;
                    }
                    i++;
                }
            }

            return true;
        }

        public boolean checkSurroundingArea(int one, int two) {

            if(two+1==11) {
                two = two-1;
            }
            if(one+1==11) {
                one = one-1;
            }

            if(board[one-1][two].equals("O")) {
                System.out.println();
                System.out.println("Error! Ships cannot touch!");
                System.out.println();
                return false;
            }
            if(board[one][two+1].equals("O")) {
                System.out.println();
                System.out.println("Error! Ships cannot touch!");
                System.out.println();
                return false;
            }
            if(board[one+1][two].equals("O")) {
                System.out.println();
                System.out.println("Error! Ships cannot touch!");
                System.out.println();
                return false;
            }
            if(board[one][two-1].equals("O")) {
                System.out.println();
                System.out.println("Error! Ships cannot touch!");
                System.out.println();
                return false;
            }

            return true;
        }

        public boolean fireShip(int[] targetArray) {
            int row = targetArray[0];
            int col = targetArray[1];

            if (board[row][col].equals("O")) {
                board[row][col] = "X";
                return true;
            }
            else {
                board[row][col] = "M";
                return false;
            }

        }

        public boolean checkIfAllShipsSunk() {
            for(int rows = 0; rows<board.length; rows++) {
                for(int cols = 0; cols<board[rows].length; cols++) {
                    if (board[rows][cols].equals("O")){
                        return false;
                    }
                }
            }
            return true;
        }

        public String[][] getBoard() {
            return board;
        }

        public void placeMiss(int[] targetArray) {
            int row = targetArray[0];
            int col = targetArray[1];

            board[row][col] = "M";
        }

    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    //import static java.lang.Integer.parseInt;

    public class Ship {
        int size;
        String shipName;
        String[] shipArray;
        int[] shipCoordinates;
        int[] shipTargetArray;

        boolean shipSunk = false;




        public Ship(String shipName, int size) {
            //use as a switch case variable to loop name in user prompt
            //consider just suing ship size
            this.shipName = shipName;
            this.size = size;
            this.shipArray = new String[size];
            this.shipCoordinates = new int[4];
            this.shipTargetArray = new int[size];
            fillShipArray();
            fillCoordinateArray();


        }
        public void buildShip(int[] shipCoordinates) {
            int[] copyOfShipCoordinates = new int[4];
            copyOfShipCoordinates[0] = shipCoordinates[0];
            copyOfShipCoordinates[1] = shipCoordinates[1];
            copyOfShipCoordinates[2] = shipCoordinates[2];
            copyOfShipCoordinates[3] = shipCoordinates[3];

            this.shipCoordinates = copyOfShipCoordinates;

        }

        public void fillShipArray() {
            for(int i = 0; i<size; i++ ) {
                shipArray[i] = "O";
            }
        }

        public void setValidTargetArray() {
            if(shipCoordinates[0] == shipCoordinates[2]) { //HORIZONTAL

                int arrayIndex = 0;
                for (int i = shipCoordinates[1]; i<= shipCoordinates[3];i++) {
                    String s1 = Integer.toString(shipCoordinates[0])+Integer.toString(i);
                    int i1 = Integer.parseInt(s1);
                    shipTargetArray[arrayIndex] = i1;
                    arrayIndex++;
                }

            }

            if(shipCoordinates[1] == shipCoordinates[3]) { //VERTICAL
                int arrayIndex = 0;
                for (int i = shipCoordinates[0]; i<= shipCoordinates[2];i++) {
                    String s1 = Integer.toString(i) + Integer.toString(shipCoordinates[3]);
                    int i1 = Integer.parseInt(s1);
                    shipTargetArray[arrayIndex] = i1;
                    arrayIndex++;
                }
            }
        }

        public int[] getShipTargetArray() {
            return shipTargetArray;
        }

        public void fillCoordinateArray() {
            for (int i = 0; i<shipCoordinates.length; i++) {
                shipCoordinates[i] = -2;
            }
        }

        public void setShipCoordinates(int[] shipCoordinates) {
            this.shipCoordinates = shipCoordinates;
        }

        public void printArray() {
            for(String x : shipArray) {
                System.out.print(x);
            }
        }

        public void setHit(int arraySlot) {
            shipArray[arraySlot] = "X";
        }

        public String[] getShipArray() {

            return shipArray;
        }


        public void loopCoordinates() {
            for (int i = 0;i<shipCoordinates.length; i++) {
                System.out.print(shipCoordinates[i]);
            }
        }

        public int[] getShipCoordinates() {
            return shipCoordinates;
        }

        public String getShipName() {
            return this.shipName;
        }

        public int getSize() {
            return size;
        }

        public boolean shipSunk(Board board) {
           String[][] boardArray = board.getBoard();
            if(shipCoordinates[0] == shipCoordinates[2]) {
                for (int col = shipCoordinates[1]; col<=shipCoordinates[3];col++) {
                    if(boardArray[shipCoordinates[0]][col].equals("X")) {
                        return false;
                    }
                }
            }

            if(shipCoordinates[1] == shipCoordinates[3]) {
                for (int row = shipCoordinates[0]; row<=shipCoordinates[2];row++) {
                    if(boardArray[row][shipCoordinates[1]].equals("X")) {
                        return false;
                    }
                }
            }
            shipSunk = true;
            return true;
        }

        public boolean checkShipSunk() {
            shipSunk = true;
            for(int i = 0; i<shipArray.length;i++){
                if(shipArray[i].equals("O")) {
                    shipSunk = false;
                }
            }
            return shipSunk;
        }

        public boolean getShipSunk() {
            return shipSunk;
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/10598#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Tue, 22 Nov 2022 00:56:03 UTC"
record: -1
